{"version":3,"file":"vendor-B9UgUhXA.js","sources":["../../node_modules/random-js/dist/random-js.esm.js"],"sourcesContent":["const SMALLEST_UNSAFE_INTEGER = 0x20000000000000;\r\nconst LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;\r\nconst UINT32_MAX = -1 >>> 0;\r\nconst UINT32_SIZE = UINT32_MAX + 1;\r\nconst INT32_SIZE = UINT32_SIZE / 2;\r\nconst INT32_MAX = INT32_SIZE - 1;\r\nconst UINT21_SIZE = 1 << 21;\r\nconst UINT21_MAX = UINT21_SIZE - 1;\n\n/**\r\n * Returns a value within [-0x80000000, 0x7fffffff]\r\n */\r\nfunction int32(engine) {\r\n    return engine.next() | 0;\r\n}\n\nfunction add(distribution, addend) {\r\n    if (addend === 0) {\r\n        return distribution;\r\n    }\r\n    else {\r\n        return engine => distribution(engine) + addend;\r\n    }\r\n}\n\n/**\r\n * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n */\r\nfunction int53(engine) {\r\n    const high = engine.next() | 0;\r\n    const low = engine.next() >>> 0;\r\n    return ((high & UINT21_MAX) * UINT32_SIZE +\r\n        low +\r\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0));\r\n}\n\n/**\r\n * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n */\r\nfunction int53Full(engine) {\r\n    while (true) {\r\n        const high = engine.next() | 0;\r\n        if (high & 0x400000) {\r\n            if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {\r\n                return SMALLEST_UNSAFE_INTEGER;\r\n            }\r\n        }\r\n        else {\r\n            const low = engine.next() >>> 0;\r\n            return ((high & UINT21_MAX) * UINT32_SIZE +\r\n                low +\r\n                (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0));\r\n        }\r\n    }\r\n}\n\n/**\r\n * Returns a value within [0, 0xffffffff]\r\n */\r\nfunction uint32(engine) {\r\n    return engine.next() >>> 0;\r\n}\n\n/**\r\n * Returns a value within [0, 0x1fffffffffffff]\r\n */\r\nfunction uint53(engine) {\r\n    const high = engine.next() & UINT21_MAX;\r\n    const low = engine.next() >>> 0;\r\n    return high * UINT32_SIZE + low;\r\n}\n\n/**\r\n * Returns a value within [0, 0x20000000000000]\r\n */\r\nfunction uint53Full(engine) {\r\n    while (true) {\r\n        const high = engine.next() | 0;\r\n        if (high & UINT21_SIZE) {\r\n            if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {\r\n                return SMALLEST_UNSAFE_INTEGER;\r\n            }\r\n        }\r\n        else {\r\n            const low = engine.next() >>> 0;\r\n            return (high & UINT21_MAX) * UINT32_SIZE + low;\r\n        }\r\n    }\r\n}\n\nfunction isPowerOfTwoMinusOne(value) {\r\n    return ((value + 1) & value) === 0;\r\n}\r\nfunction bitmask(masking) {\r\n    return (engine) => engine.next() & masking;\r\n}\r\nfunction downscaleToLoopCheckedRange(range) {\r\n    const extendedRange = range + 1;\r\n    const maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);\r\n    return engine => {\r\n        let value = 0;\r\n        do {\r\n            value = engine.next() >>> 0;\r\n        } while (value >= maximum);\r\n        return value % extendedRange;\r\n    };\r\n}\r\nfunction downscaleToRange(range) {\r\n    if (isPowerOfTwoMinusOne(range)) {\r\n        return bitmask(range);\r\n    }\r\n    else {\r\n        return downscaleToLoopCheckedRange(range);\r\n    }\r\n}\r\nfunction isEvenlyDivisibleByMaxInt32(value) {\r\n    return (value | 0) === 0;\r\n}\r\nfunction upscaleWithHighMasking(masking) {\r\n    return engine => {\r\n        const high = engine.next() & masking;\r\n        const low = engine.next() >>> 0;\r\n        return high * UINT32_SIZE + low;\r\n    };\r\n}\r\nfunction upscaleToLoopCheckedRange(extendedRange) {\r\n    const maximum = extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);\r\n    return engine => {\r\n        let ret = 0;\r\n        do {\r\n            const high = engine.next() & UINT21_MAX;\r\n            const low = engine.next() >>> 0;\r\n            ret = high * UINT32_SIZE + low;\r\n        } while (ret >= maximum);\r\n        return ret % extendedRange;\r\n    };\r\n}\r\nfunction upscaleWithinU53(range) {\r\n    const extendedRange = range + 1;\r\n    if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\r\n        const highRange = ((extendedRange / UINT32_SIZE) | 0) - 1;\r\n        if (isPowerOfTwoMinusOne(highRange)) {\r\n            return upscaleWithHighMasking(highRange);\r\n        }\r\n    }\r\n    return upscaleToLoopCheckedRange(extendedRange);\r\n}\r\nfunction upscaleWithinI53AndLoopCheck(min, max) {\r\n    return engine => {\r\n        let ret = 0;\r\n        do {\r\n            const high = engine.next() | 0;\r\n            const low = engine.next() >>> 0;\r\n            ret =\r\n                (high & UINT21_MAX) * UINT32_SIZE +\r\n                    low +\r\n                    (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\r\n        } while (ret < min || ret > max);\r\n        return ret;\r\n    };\r\n}\r\n/**\r\n * Returns a Distribution to return a value within [min, max]\r\n * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n */\r\nfunction integer(min, max) {\r\n    min = Math.floor(min);\r\n    max = Math.floor(max);\r\n    if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {\r\n        throw new RangeError(`Expected min to be at least ${-SMALLEST_UNSAFE_INTEGER}`);\r\n    }\r\n    else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {\r\n        throw new RangeError(`Expected max to be at most ${SMALLEST_UNSAFE_INTEGER}`);\r\n    }\r\n    const range = max - min;\r\n    if (range <= 0 || !isFinite(range)) {\r\n        return () => min;\r\n    }\r\n    else if (range === UINT32_MAX) {\r\n        if (min === 0) {\r\n            return uint32;\r\n        }\r\n        else {\r\n            return add(int32, min + INT32_SIZE);\r\n        }\r\n    }\r\n    else if (range < UINT32_MAX) {\r\n        return add(downscaleToRange(range), min);\r\n    }\r\n    else if (range === LARGEST_SAFE_INTEGER) {\r\n        return add(uint53, min);\r\n    }\r\n    else if (range < LARGEST_SAFE_INTEGER) {\r\n        return add(upscaleWithinU53(range), min);\r\n    }\r\n    else if (max - 1 - min === LARGEST_SAFE_INTEGER) {\r\n        return add(uint53Full, min);\r\n    }\r\n    else if (min === -SMALLEST_UNSAFE_INTEGER &&\r\n        max === SMALLEST_UNSAFE_INTEGER) {\r\n        return int53Full;\r\n    }\r\n    else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {\r\n        return int53;\r\n    }\r\n    else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\r\n        return add(int53, 1);\r\n    }\r\n    else if (max === SMALLEST_UNSAFE_INTEGER) {\r\n        return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\r\n    }\r\n    else {\r\n        return upscaleWithinI53AndLoopCheck(min, max);\r\n    }\r\n}\n\nfunction isLeastBitTrue(engine) {\r\n    return (engine.next() & 1) === 1;\r\n}\r\nfunction lessThan(distribution, value) {\r\n    return engine => distribution(engine) < value;\r\n}\r\nfunction probability(percentage) {\r\n    if (percentage <= 0) {\r\n        return () => false;\r\n    }\r\n    else if (percentage >= 1) {\r\n        return () => true;\r\n    }\r\n    else {\r\n        const scaled = percentage * UINT32_SIZE;\r\n        if (scaled % 1 === 0) {\r\n            return lessThan(int32, (scaled - INT32_SIZE) | 0);\r\n        }\r\n        else {\r\n            return lessThan(uint53, Math.round(percentage * SMALLEST_UNSAFE_INTEGER));\r\n        }\r\n    }\r\n}\r\nfunction bool(numerator, denominator) {\r\n    if (denominator == null) {\r\n        if (numerator == null) {\r\n            return isLeastBitTrue;\r\n        }\r\n        return probability(numerator);\r\n    }\r\n    else {\r\n        if (numerator <= 0) {\r\n            return () => false;\r\n        }\r\n        else if (numerator >= denominator) {\r\n            return () => true;\r\n        }\r\n        return lessThan(integer(0, denominator - 1), numerator);\r\n    }\r\n}\n\n/**\r\n * Returns a Distribution that returns a random `Date` within the inclusive\r\n * range of [`start`, `end`].\r\n * @param start The minimum `Date`\r\n * @param end The maximum `Date`\r\n */\r\nfunction date(start, end) {\r\n    const distribution = integer(+start, +end);\r\n    return engine => new Date(distribution(engine));\r\n}\n\n/**\r\n * Returns a Distribution to return a value within [1, sideCount]\r\n * @param sideCount The number of sides of the die\r\n */\r\nfunction die(sideCount) {\r\n    return integer(1, sideCount);\r\n}\n\n/**\r\n * Returns a distribution that returns an array of length `dieCount` of values\r\n * within [1, `sideCount`]\r\n * @param sideCount The number of sides of each die\r\n * @param dieCount The number of dice\r\n */\r\nfunction dice(sideCount, dieCount) {\r\n    const distribution = die(sideCount);\r\n    return engine => {\r\n        const result = [];\r\n        for (let i = 0; i < dieCount; ++i) {\r\n            result.push(distribution(engine));\r\n        }\r\n        return result;\r\n    };\r\n}\n\n// tslint:disable:unified-signatures\r\n// has 2**x chars, for faster uniform distribution\r\nconst DEFAULT_STRING_POOL = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\r\nfunction string(pool = DEFAULT_STRING_POOL) {\r\n    const poolLength = pool.length;\r\n    if (!poolLength) {\r\n        throw new Error(\"Expected pool not to be an empty string\");\r\n    }\r\n    const distribution = integer(0, poolLength - 1);\r\n    return (engine, length) => {\r\n        let result = \"\";\r\n        for (let i = 0; i < length; ++i) {\r\n            const j = distribution(engine);\r\n            result += pool.charAt(j);\r\n        }\r\n        return result;\r\n    };\r\n}\n\nconst LOWER_HEX_POOL = \"0123456789abcdef\";\r\nconst lowerHex = string(LOWER_HEX_POOL);\r\nconst upperHex = string(LOWER_HEX_POOL.toUpperCase());\r\n/**\r\n * Returns a Distribution that returns a random string comprised of numbers\r\n * or the characters `abcdef` (or `ABCDEF`) of length `length`.\r\n * @param length Length of the result string\r\n * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n */\r\nfunction hex(uppercase) {\r\n    if (uppercase) {\r\n        return upperHex;\r\n    }\r\n    else {\r\n        return lowerHex;\r\n    }\r\n}\n\nfunction convertSliceArgument(value, length) {\r\n    if (value < 0) {\r\n        return Math.max(value + length, 0);\r\n    }\r\n    else {\r\n        return Math.min(value, length);\r\n    }\r\n}\n\nfunction toInteger(value) {\r\n    const num = +value;\r\n    if (num < 0) {\r\n        return Math.ceil(num);\r\n    }\r\n    else {\r\n        return Math.floor(num);\r\n    }\r\n}\n\n/**\r\n * Returns a random value within the provided `source` within the sliced\r\n * bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\r\nfunction pick(engine, source, begin, end) {\r\n    const length = source.length;\r\n    if (length === 0) {\r\n        throw new RangeError(\"Cannot pick from an empty array\");\r\n    }\r\n    const start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\r\n    const finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);\r\n    if (start >= finish) {\r\n        throw new RangeError(`Cannot pick between bounds ${start} and ${finish}`);\r\n    }\r\n    const distribution = integer(start, finish - 1);\r\n    return source[distribution(engine)];\r\n}\n\nfunction multiply(distribution, multiplier) {\r\n    if (multiplier === 1) {\r\n        return distribution;\r\n    }\r\n    else if (multiplier === 0) {\r\n        return () => 0;\r\n    }\r\n    else {\r\n        return engine => distribution(engine) * multiplier;\r\n    }\r\n}\n\n/**\r\n * Returns a floating-point value within [0.0, 1.0)\r\n */\r\nfunction realZeroToOneExclusive(engine) {\r\n    return uint53(engine) / SMALLEST_UNSAFE_INTEGER;\r\n}\n\n/**\r\n * Returns a floating-point value within [0.0, 1.0]\r\n */\r\nfunction realZeroToOneInclusive(engine) {\r\n    return uint53Full(engine) / SMALLEST_UNSAFE_INTEGER;\r\n}\n\n/**\r\n * Returns a floating-point value within [min, max) or [min, max]\r\n * @param min The minimum floating-point value, inclusive.\r\n * @param max The maximum floating-point value.\r\n * @param inclusive If true, `max` will be inclusive.\r\n */\r\nfunction real(min, max, inclusive = false) {\r\n    if (!isFinite(min)) {\r\n        throw new RangeError(\"Expected min to be a finite number\");\r\n    }\r\n    else if (!isFinite(max)) {\r\n        throw new RangeError(\"Expected max to be a finite number\");\r\n    }\r\n    return add(multiply(inclusive ? realZeroToOneInclusive : realZeroToOneExclusive, max - min), min);\r\n}\n\nconst sliceArray = Array.prototype.slice;\n\n/**\r\n * Shuffles an array in-place\r\n * @param engine The Engine to use when choosing random values\r\n * @param array The array to shuffle\r\n * @param downTo minimum index to shuffle. Only used internally.\r\n */\r\nfunction shuffle(engine, array, downTo = 0) {\r\n    const length = array.length;\r\n    if (length) {\r\n        for (let i = (length - 1) >>> 0; i > downTo; --i) {\r\n            const distribution = integer(0, i);\r\n            const j = distribution(engine);\r\n            if (i !== j) {\r\n                const tmp = array[i];\r\n                array[i] = array[j];\r\n                array[j] = tmp;\r\n            }\r\n        }\r\n    }\r\n    return array;\r\n}\n\n/**\r\n * From the population array, produce an array with sampleSize elements that\r\n * are randomly chosen without repeats.\r\n * @param engine The Engine to use when choosing random values\r\n * @param population An array that has items to choose a sample from\r\n * @param sampleSize The size of the result array\r\n */\r\nfunction sample(engine, population, sampleSize) {\r\n    if (sampleSize < 0 ||\r\n        sampleSize > population.length ||\r\n        !isFinite(sampleSize)) {\r\n        throw new RangeError(\"Expected sampleSize to be within 0 and the length of the population\");\r\n    }\r\n    if (sampleSize === 0) {\r\n        return [];\r\n    }\r\n    const clone = sliceArray.call(population);\r\n    const length = clone.length;\r\n    if (length === sampleSize) {\r\n        return shuffle(engine, clone, 0);\r\n    }\r\n    const tailLength = length - sampleSize;\r\n    return shuffle(engine, clone, tailLength - 1).slice(tailLength);\r\n}\n\nconst stringRepeat = (() => {\r\n    try {\r\n        if (\"x\".repeat(3) === \"xxx\") {\r\n            return (pattern, count) => pattern.repeat(count);\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    return (pattern, count) => {\r\n        let result = \"\";\r\n        while (count > 0) {\r\n            if (count & 1) {\r\n                result += pattern;\r\n            }\r\n            count >>= 1;\r\n            pattern += pattern;\r\n        }\r\n        return result;\r\n    };\r\n})();\n\nfunction zeroPad(text, zeroCount) {\r\n    return stringRepeat(\"0\", zeroCount - text.length) + text;\r\n}\r\n/**\r\n * Returns a Universally Unique Identifier Version 4.\r\n *\r\n * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n */\r\nfunction uuid4(engine) {\r\n    const a = engine.next() >>> 0;\r\n    const b = engine.next() | 0;\r\n    const c = engine.next() | 0;\r\n    const d = engine.next() >>> 0;\r\n    return (zeroPad(a.toString(16), 8) +\r\n        \"-\" +\r\n        zeroPad((b & 0xffff).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\r\n        \"-\" +\r\n        zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\r\n        zeroPad(d.toString(16), 8));\r\n}\n\n/**\r\n * An int32-producing Engine that uses `Math.random()`\r\n */\r\nconst nativeMath = {\r\n    next() {\r\n        return (Math.random() * UINT32_SIZE) | 0;\r\n    }\r\n};\n\n// tslint:disable:unified-signatures\r\n/**\r\n * A wrapper around an Engine that provides easy-to-use methods for\r\n * producing values based on known distributions\r\n */\r\nclass Random {\r\n    /**\r\n     * Creates a new Random wrapper\r\n     * @param engine The engine to use (defaults to a `Math.random`-based implementation)\r\n     */\r\n    constructor(engine = nativeMath) {\r\n        this.engine = engine;\r\n    }\r\n    /**\r\n     * Returns a value within [-0x80000000, 0x7fffffff]\r\n     */\r\n    int32() {\r\n        return int32(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0xffffffff]\r\n     */\r\n    uint32() {\r\n        return uint32(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0x1fffffffffffff]\r\n     */\r\n    uint53() {\r\n        return uint53(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [0, 0x20000000000000]\r\n     */\r\n    uint53Full() {\r\n        return uint53Full(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n     */\r\n    int53() {\r\n        return int53(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n     */\r\n    int53Full() {\r\n        return int53Full(this.engine);\r\n    }\r\n    /**\r\n     * Returns a value within [min, max]\r\n     * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n     * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n     */\r\n    integer(min, max) {\r\n        return integer(min, max)(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [0.0, 1.0]\r\n     */\r\n    realZeroToOneInclusive() {\r\n        return realZeroToOneInclusive(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [0.0, 1.0)\r\n     */\r\n    realZeroToOneExclusive() {\r\n        return realZeroToOneExclusive(this.engine);\r\n    }\r\n    /**\r\n     * Returns a floating-point value within [min, max) or [min, max]\r\n     * @param min The minimum floating-point value, inclusive.\r\n     * @param max The maximum floating-point value.\r\n     * @param inclusive If true, `max` will be inclusive.\r\n     */\r\n    real(min, max, inclusive = false) {\r\n        return real(min, max, inclusive)(this.engine);\r\n    }\r\n    bool(numerator, denominator) {\r\n        return bool(numerator, denominator)(this.engine);\r\n    }\r\n    /**\r\n     * Return a random value within the provided `source` within the sliced\r\n     * bounds of `begin` and `end`.\r\n     * @param source an array of items to pick from\r\n     * @param begin the beginning slice index (defaults to `0`)\r\n     * @param end the ending slice index (defaults to `source.length`)\r\n     */\r\n    pick(source, begin, end) {\r\n        return pick(this.engine, source, begin, end);\r\n    }\r\n    /**\r\n     * Shuffles an array in-place\r\n     * @param array The array to shuffle\r\n     */\r\n    shuffle(array) {\r\n        return shuffle(this.engine, array);\r\n    }\r\n    /**\r\n     * From the population array, returns an array with sampleSize elements that\r\n     * are randomly chosen without repeats.\r\n     * @param population An array that has items to choose a sample from\r\n     * @param sampleSize The size of the result array\r\n     */\r\n    sample(population, sampleSize) {\r\n        return sample(this.engine, population, sampleSize);\r\n    }\r\n    /**\r\n     * Returns a value within [1, sideCount]\r\n     * @param sideCount The number of sides of the die\r\n     */\r\n    die(sideCount) {\r\n        return die(sideCount)(this.engine);\r\n    }\r\n    /**\r\n     * Returns an array of length `dieCount` of values within [1, sideCount]\r\n     * @param sideCount The number of sides of each die\r\n     * @param dieCount The number of dice\r\n     */\r\n    dice(sideCount, dieCount) {\r\n        return dice(sideCount, dieCount)(this.engine);\r\n    }\r\n    /**\r\n     * Returns a Universally Unique Identifier Version 4.\r\n     *\r\n     * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n     */\r\n    uuid4() {\r\n        return uuid4(this.engine);\r\n    }\r\n    string(length, pool) {\r\n        return string(pool)(this.engine, length);\r\n    }\r\n    /**\r\n     * Returns a random string comprised of numbers or the characters `abcdef`\r\n     * (or `ABCDEF`) of length `length`.\r\n     * @param length Length of the result string\r\n     * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n     */\r\n    hex(length, uppercase) {\r\n        return hex(uppercase)(this.engine, length);\r\n    }\r\n    /**\r\n     * Returns a random `Date` within the inclusive range of [`start`, `end`].\r\n     * @param start The minimum `Date`\r\n     * @param end The maximum `Date`\r\n     */\r\n    date(start, end) {\r\n        return date(start, end)(this.engine);\r\n    }\r\n}\n\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\r\n */\r\nconst I32Array = (() => {\r\n    try {\r\n        const buffer = new ArrayBuffer(4);\r\n        const view = new Int32Array(buffer);\r\n        view[0] = INT32_SIZE;\r\n        if (view[0] === -INT32_SIZE) {\r\n            return Int32Array;\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    return Array;\r\n})();\n\nlet data = null;\r\nconst COUNT = 128;\r\nlet index = COUNT;\r\n/**\r\n * An Engine that relies on the globally-available `crypto.getRandomValues`,\r\n * which is typically available in modern browsers.\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\r\n *\r\n * If unavailable or otherwise non-functioning, then `browserCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\r\nconst browserCrypto = {\r\n    next() {\r\n        if (index >= COUNT) {\r\n            if (data === null) {\r\n                data = new I32Array(COUNT);\r\n            }\r\n            crypto.getRandomValues(data);\r\n            index = 0;\r\n        }\r\n        return data[index++] | 0;\r\n    }\r\n};\n\n/**\r\n * Returns an array of random int32 values, based on current time\r\n * and a random number engine\r\n *\r\n * @param engine an Engine to pull random values from, default `nativeMath`\r\n * @param length the length of the Array, minimum 1, default 16\r\n */\r\nfunction createEntropy(engine = nativeMath, length = 16) {\r\n    const array = [];\r\n    array.push(new Date().getTime() | 0);\r\n    for (let i = 1; i < length; ++i) {\r\n        array[i] = engine.next() | 0;\r\n    }\r\n    return array;\r\n}\n\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\r\n */\r\nconst imul = (() => {\r\n    try {\r\n        if (Math.imul(UINT32_MAX, 5) === -5) {\r\n            return Math.imul;\r\n        }\r\n    }\r\n    catch (_) {\r\n        // nothing to do here\r\n    }\r\n    const UINT16_MAX = 0xffff;\r\n    return (a, b) => {\r\n        const ah = (a >>> 16) & UINT16_MAX;\r\n        const al = a & UINT16_MAX;\r\n        const bh = (b >>> 16) & UINT16_MAX;\r\n        const bl = b & UINT16_MAX;\r\n        // the shift by 0 fixes the sign on the high part\r\n        // the final |0 converts the unsigned value into a signed value\r\n        return (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;\r\n    };\r\n})();\n\nconst ARRAY_SIZE = 624;\r\nconst ARRAY_MAX = ARRAY_SIZE - 1;\r\nconst M = 397;\r\nconst ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;\r\nconst A = 0x9908b0df;\r\n/**\r\n * An Engine that is a pseudorandom number generator using the Mersenne\r\n * Twister algorithm based on the prime 2**19937 − 1\r\n *\r\n * See http://en.wikipedia.org/wiki/Mersenne_twister\r\n */\r\nclass MersenneTwister19937 {\r\n    /**\r\n     * MersenneTwister19937 should not be instantiated directly.\r\n     * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.\r\n     */\r\n    constructor() {\r\n        this.data = new I32Array(ARRAY_SIZE);\r\n        this.index = 0; // integer within [0, 624]\r\n        this.uses = 0;\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with an initial int32 value\r\n     * @param initial the initial seed value\r\n     */\r\n    static seed(initial) {\r\n        return new MersenneTwister19937().seed(initial);\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with zero or more int32 values\r\n     * @param source A series of int32 values\r\n     */\r\n    static seedWithArray(source) {\r\n        return new MersenneTwister19937().seedWithArray(source);\r\n    }\r\n    /**\r\n     * Returns a MersenneTwister19937 seeded with the current time and\r\n     * a series of natively-generated random values\r\n     */\r\n    static autoSeed() {\r\n        return MersenneTwister19937.seedWithArray(createEntropy());\r\n    }\r\n    /**\r\n     * Returns the next int32 value of the sequence\r\n     */\r\n    next() {\r\n        if ((this.index | 0) >= ARRAY_SIZE) {\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        const value = this.data[this.index];\r\n        this.index = (this.index + 1) | 0;\r\n        this.uses += 1;\r\n        return temper(value) | 0;\r\n    }\r\n    /**\r\n     * Returns the number of times that the Engine has been used.\r\n     *\r\n     * This can be provided to an unused MersenneTwister19937 with the same\r\n     * seed, bringing it to the exact point that was left off.\r\n     */\r\n    getUseCount() {\r\n        return this.uses;\r\n    }\r\n    /**\r\n     * Discards one or more items from the engine\r\n     * @param count The count of items to discard\r\n     */\r\n    discard(count) {\r\n        if (count <= 0) {\r\n            return this;\r\n        }\r\n        this.uses += count;\r\n        if ((this.index | 0) >= ARRAY_SIZE) {\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        while (count + this.index > ARRAY_SIZE) {\r\n            count -= ARRAY_SIZE - this.index;\r\n            refreshData(this.data);\r\n            this.index = 0;\r\n        }\r\n        this.index = (this.index + count) | 0;\r\n        return this;\r\n    }\r\n    seed(initial) {\r\n        let previous = 0;\r\n        this.data[0] = previous = initial | 0;\r\n        for (let i = 1; i < ARRAY_SIZE; i = (i + 1) | 0) {\r\n            this.data[i] = previous =\r\n                (imul(previous ^ (previous >>> 30), 0x6c078965) + i) | 0;\r\n        }\r\n        this.index = ARRAY_SIZE;\r\n        this.uses = 0;\r\n        return this;\r\n    }\r\n    seedWithArray(source) {\r\n        this.seed(0x012bd6aa);\r\n        seedWithArray(this.data, source);\r\n        return this;\r\n    }\r\n}\r\nfunction refreshData(data) {\r\n    let k = 0;\r\n    let tmp = 0;\r\n    for (; (k | 0) < ARRAY_SIZE_MINUS_M; k = (k + 1) | 0) {\r\n        tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\r\n        data[k] = data[(k + M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n    }\r\n    for (; (k | 0) < ARRAY_MAX; k = (k + 1) | 0) {\r\n        tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\r\n        data[k] =\r\n            data[(k - ARRAY_SIZE_MINUS_M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n    }\r\n    tmp = (data[ARRAY_MAX] & INT32_SIZE) | (data[0] & INT32_MAX);\r\n    data[ARRAY_MAX] = data[M - 1] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n}\r\nfunction temper(value) {\r\n    value ^= value >>> 11;\r\n    value ^= (value << 7) & 0x9d2c5680;\r\n    value ^= (value << 15) & 0xefc60000;\r\n    return value ^ (value >>> 18);\r\n}\r\nfunction seedWithArray(data, source) {\r\n    let i = 1;\r\n    let j = 0;\r\n    const sourceLength = source.length;\r\n    let k = Math.max(sourceLength, ARRAY_SIZE) | 0;\r\n    let previous = data[0] | 0;\r\n    for (; (k | 0) > 0; --k) {\r\n        data[i] = previous =\r\n            ((data[i] ^ imul(previous ^ (previous >>> 30), 0x0019660d)) +\r\n                (source[j] | 0) +\r\n                (j | 0)) |\r\n                0;\r\n        i = (i + 1) | 0;\r\n        ++j;\r\n        if ((i | 0) > ARRAY_MAX) {\r\n            data[0] = data[ARRAY_MAX];\r\n            i = 1;\r\n        }\r\n        if (j >= sourceLength) {\r\n            j = 0;\r\n        }\r\n    }\r\n    for (k = ARRAY_MAX; (k | 0) > 0; --k) {\r\n        data[i] = previous =\r\n            ((data[i] ^ imul(previous ^ (previous >>> 30), 0x5d588b65)) - i) | 0;\r\n        i = (i + 1) | 0;\r\n        if ((i | 0) > ARRAY_MAX) {\r\n            data[0] = data[ARRAY_MAX];\r\n            i = 1;\r\n        }\r\n    }\r\n    data[0] = INT32_SIZE;\r\n}\n\nlet data$1 = null;\r\nconst COUNT$1 = 128;\r\nlet index$1 = COUNT$1;\r\n/**\r\n * An Engine that relies on the node-available\r\n * `require('crypto').randomBytes`, which has been available since 0.58.\r\n *\r\n * See https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\r\n *\r\n * If unavailable or otherwise non-functioning, then `nodeCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\r\nconst nodeCrypto = {\r\n    next() {\r\n        if (index$1 >= COUNT$1) {\r\n            data$1 = new Int32Array(new Int8Array(require(\"crypto\").randomBytes(4 * COUNT$1)).buffer);\r\n            index$1 = 0;\r\n        }\r\n        return data$1[index$1++] | 0;\r\n    }\r\n};\n\n/**\r\n * Returns a Distribution to random value within the provided `source`\r\n * within the sliced bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\r\nfunction picker(source, begin, end) {\r\n    const clone = sliceArray.call(source, begin, end);\r\n    if (clone.length === 0) {\r\n        throw new RangeError(`Cannot pick from a source with no items`);\r\n    }\r\n    const distribution = integer(0, clone.length - 1);\r\n    return engine => clone[distribution(engine)];\r\n}\n\nexport { Random, browserCrypto, nativeMath, MersenneTwister19937, nodeCrypto, bool, date, dice, die, hex, int32, int53, int53Full, integer, pick, picker, real, realZeroToOneExclusive, realZeroToOneInclusive, sample, shuffle, string, uint32, uint53, uint53Full, uuid4, createEntropy };\n//# sourceMappingURL=random-js.esm.js.map\n"],"names":["int32","engine","add","distribution","addend","int53","high","low","int53Full","uint32","uint53","uint53Full","isPowerOfTwoMinusOne","value","bitmask","masking","downscaleToLoopCheckedRange","range","extendedRange","maximum","downscaleToRange","isEvenlyDivisibleByMaxInt32","upscaleWithHighMasking","upscaleToLoopCheckedRange","ret","upscaleWithinU53","highRange","upscaleWithinI53AndLoopCheck","min","max","integer","isLeastBitTrue","lessThan","probability","percentage","scaled","bool","numerator","denominator","date","start","end","die","sideCount","dice","dieCount","result","i","DEFAULT_STRING_POOL","string","pool","poolLength","length","j","LOWER_HEX_POOL","lowerHex","upperHex","hex","uppercase","convertSliceArgument","toInteger","num","pick","source","begin","finish","multiply","multiplier","realZeroToOneExclusive","realZeroToOneInclusive","real","inclusive","sliceArray","shuffle","array","downTo","tmp","sample","population","sampleSize","clone","tailLength","stringRepeat","pattern","count","zeroPad","text","zeroCount","uuid4","a","b","c","d","nativeMath","Random","buffer","view","UINT16_MAX","ah","al","bh","bl"],"mappings":"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","x_google_ignoreList":[0]}